default_platform(:ios)

platform :ios do
  before_all do
    keychain_password = '12345678'

    create_keychain(
      name: "ios-build.keychain",
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )

    if ENV["BUILD_PODS"] == 'true'
      cocoapods(
        podfile: ENV["PODS_PATH"],
        use_bundle_exec: false
      )
    end
  end

  desc "Build"
  lane :build do
    setup_ci if ENV['CI']

    api_key = app_store_connect_api_key(
      key_id: ENV['APPLE_KEY_ID'],
      issuer_id: ENV['APPLE_KEY_ISSUER_ID'],
      key_content: ENV['APPLE_KEY_CONTENT'],
      is_key_content_base64: true,
      in_house: false # optional but may be required if using match/sigh
    )

    use_provisioning_profile = !ENV['PROVISIONING_PROFILE'].empty?

    use_workspace = !ENV['WORKSPACE_PATH'].empty?
    use_project = !ENV['PROJECT_PATH'].empty?

    # https://docs.fastlane.tools/actions/match/
    match(type: ENV['MATCH_BUILD_TYPE'], api_key: api_key, readonly: false)

    if ENV['INCREMENT_BUILD_NUMBER'] == 'true'
      increment_build_number(
        xcodeproj: ENV['PROJECT_PATH'],
        build_number: (latest_testflight_build_number(
          app_identifier: ENV["IOS_APP_ID"],
          api_key: api_key,
          team_name: ENV["TEAM_NAME"],
        ) + 1).to_s,
      )
    end

    if use_provisioning_profile
      update_code_signing_settings(
        use_automatic_signing: false,
        sdk: "iphoneos*",
        profile_name: ENV['PROVISIONING_PROFILE'],
        path: ENV['PROJECT_PATH']
      )
    end

    build_app(
      workspace: use_workspace ? ENV['WORKSPACE_PATH'] : nil,
      project: !use_workspace ? ENV['PROJECT_PATH'] : nil,
      configuration: ENV['CONFIGURATION'],
      scheme: ENV['SCHEME'],
      output_directory: File.dirname(ENV['OUTPUT_PATH']),
      output_name: File.basename(ENV['OUTPUT_PATH']),
      clean: true,
      export_method: ENV['EXPORT_METHOD'],
      export_team_id: ENV['TEAM_ID'],
      silent: true,
      export_options: use_provisioning_profile ? {
        provisioningProfiles: {
          "#{ENV['IOS_APP_ID']}" => ENV['PROVISIONING_PROFILE'],
        },
      } : nil
    )

    if ENV["BROWSERSTACK_UPLOAD"] == 'true'
      upload_to_browserstack_app_live(
        browserstack_username: ENV["BROWSERSTACK_USERNAME"],
        browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
        file_path: ENV["OUTPUT_PATH"]
      )
    end

    # 上传蒲公英
    if ENV["PGY_UPLOAD"] == 'true'
      answer = pgyer(api_key: ENV["PGY_API_KEY"], password: ENV["PGY_PASSWORD"], install_type: ENV["PGY_INSTALL_TYPE"], update_description: "by fastlane")

      sh("echo download_url=#{answer["fastlaneAddedWholeVisitUrl"]} >> $GITHUB_ENV")
    end

    if ENV["TESTFLIGHT_UPLOAD"] == 'true'
      upload_to_testflight(
        ipa: File.join(File.dirname(ENV['OUTPUT_PATH']), File.basename(ENV['OUTPUT_PATH'])),
        api_key: api_key,
        app_identifier: ENV['IOS_APP_ID'],
        team_name: ENV['TEAM_NAME'],
        skip_waiting_for_build_processing: true,
        skip_submission: true,
      )
    end

    if ENV["APPSTORE_UPLOAD"] == 'true'
      upload_to_app_store(
        ignore_language_directory_validation: true
      )
    end

  end

  after_all do
    delete_keychain(
      name: "ios-build.keychain"
    )
  end
end
